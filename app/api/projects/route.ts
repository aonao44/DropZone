import { createClient } from "@/utils/supabase/server";
import { cookies } from "next/headers";
import { NextResponse } from "next/server";
import { generateRandomSlug } from "@/lib/utils";

export async function POST(request: Request) {
  try {
    const cookieStore = cookies();
    const supabase = createClient(cookieStore);
    const body = await request.json();

    if (!body.title || !body.name || !body.email) {
      return new NextResponse(
        JSON.stringify({
          error: "必須項目が不足しています: プロジェクト名、依頼者名、メールアドレス",
        }),
        { status: 400 }
      );
    }

    const projectSlug = generateRandomSlug();

    const { error: tableCheckError } = await supabase
      .from("projects")
      .select("id")
      .limit(1);

    if (tableCheckError && tableCheckError.code === "42P01") { // PostgreSQL table not exist error
      console.log("projects テーブルが存在しないため、作成します");

      const { error: createTableError } = await supabase.rpc("create_projects_table");

      if (createTableError) {
        console.error("テーブル作成エラー:", createTableError);
        
        const { error: sqlError } = await supabase.rpc(
          "execute_sql",
          {
            sql_query: `
              CREATE TABLE IF NOT EXISTS projects (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                slug TEXT UNIQUE NOT NULL,
                title TEXT NOT NULL,
                name TEXT NOT NULL,
                email TEXT NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
              );
              ALTER TABLE projects ENABLE ROW LEVEL SECURITY;
              CREATE POLICY "Allow public read access" ON projects FOR SELECT USING (true);
              CREATE POLICY "Allow public insert access" ON projects FOR INSERT WITH CHECK (true);
            `
          }
        );

        if (sqlError) {
          console.error("SQL実行エラー:", sqlError);
          return new NextResponse(
            JSON.stringify({
              error: "プロジェクトテーブルの作成に失敗しました",
            }),
            { status: 500 }
          );
        }
      }
    }

    const { data, error } = await supabase
      .from("projects")
      .insert({
        slug: projectSlug,
        title: body.title,
        name: body.name,
        email: body.email,
      })
      .select("id, slug")
      .single();

    if (error) {
      console.error("Supabase error:", error);
      return new NextResponse(
        JSON.stringify({
          error: "プロジェクト情報の保存に失敗しました",
        }),
        { status: 500 }
      );
    }

    return new NextResponse(
      JSON.stringify({
        success: true,
        id: data.id,
        slug: data.slug,
      }),
      { status: 201 }
    );
  } catch (error) {
    console.error("Projects API error:", error);
    return new NextResponse(
      JSON.stringify({
        error: "サーバー内部エラーが発生しました",
      }),
      { status: 500 }
    );
  }
}
